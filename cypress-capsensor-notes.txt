Notes on Cypress Cap sensor

PSoC 4100 does not use CSX (cross point sensor)
UDB = universal digital blocks (UDBs) for efficient implementation of programmable peripheral

PSoC 4100 family does not support CSX sensing method since 
it does not have UDB resources which is required to implement CSX for this family

CPU on PSoC 6 Wi-Fi BT Prototyping Board:
CY8C624ABZI-D44 Series	PSoC 62
PSoC 6 Wi-Fi BT Prototyping Kit (CY8CPROTO-062-4343W)

ModusToolbox directory:/users/ronf/ModusToolbox (capsense_tuner.exe)



Changing icon size: right on IDE, select compatibility, override high DPI


July 8, 2020

 Cy_CapSense_CSXScan_Call(context);
 work done by this interrupt?
 capsense_isr(void);
 cy_capsense_sensing.c: Cy_CapSense_InterruptHandler(CYBSP_CSD_HW, &cy_capsense_context);
  context->ptrActiveScanSns->ptrISRCallback((void *)context);
 cy_capsense_structure.h:
	void (* ptrISRCallback)(void * context);  /**< Pointer to the interrupt handler of the active sensor */

cy_capsense_csx.c:
/* Enable the CSD HW block interrupt and set interrupt vector to CSX sensing method */
	context->ptrActiveScanSns->ptrISRCallback = ptrFptrCfg->fptrCSXScanISR;
cy_capsense_structure.h:	
	 cy_func_capsense_csx_scan_isr_ptr_t fptrCSXScanISR;         /**< The Cy_CapSense_CSXScanISR() function pointer*/
	fptrCSXScanISR

renamed to ptrFptrConfig
line 91: cy_stc_capsense_fptr_config_t * ptrFptrCfg = (cy_stc_capsense_fptr_config_t *)context->ptrFptrConfig;

Initializes interface between Tuner GUI and PSoC 6 MCU.
uses I2C???
400 kHZ data rate

Interrupts:
capsense_isr ==> Cy_CapSense_InterruptHandler(CYBSP_CSD_HW, &cy_capsense_context) ==> 
	context->ptrActiveScanSns->ptrISRCallback((void *)context); ==> Cy_CapSense_CSXScanISR(void * capsenseContext)


typedef struct 
 void (* ptrISRCallback)(void * context);                    /**< Pointer to the interrupt handler of the active sensor */
cy_stc_active_scan_sns_t;

structure context-> ptrActiveScanSns -> ptrISRCallback
This is set to Cy_CapSense_CSXScanISR

2. Using CapSense Tuner 3.0, I2C at 400 kbits/sec
ronf/modus/
design.cycapsense is in libs/TARGET_CY8CPROTO-062-4343W/COMPONENT_BSP_DESIGN_MODUS
(can also double click on design.cycapsense in Modus.
 => Advanced => CSD Settings => Modulator clock frequency 50MHz, divider 2.
Cy_CapSense_SetClkDivider()

AN85951
3. Longer conversion time (see Equation 5-7, Equation 5-5) 

7.1 Firmware
The PSoC CapSense Component provides multiple application programming interfaces to simplify firmware development. 
The CapSense Component Datasheet provides a detailed list and explanation of the available APIs. 
Table 7-14. Sensor Scan Time 
The sensor-scan time depends on the scan resolution and modulator clock divider (See Equation 3-5). 
10 bits gives 85 us per cell. 
Hardware scan time = (2^Resolution − 1)/Modulator Clock Frequency ⁄ 
example: 10 bit resolution 1023/12 MHz = 85 us.
where is clock speed set?
Cy_CapSense_SetClkDivider()
cy_capsense_csx.c: SetClkDivider()
--------------------

AN64846:
The programmable devices allow complex system-level integration. 
These controllers can process the raw count data as well as perform other system functions.  

------------------

looks like cortex M4 is handling cap sensor- should be able to directly access using Peripheral connect

July 9, 2020

How to printf?
#include "cy_retarget_io.h"
/* UART HAL object used by Retarget-IO for Debug UART port */
extern cyhal_uart_t cy_retarget_io_uart_obj;

https://github.com/cypresssemiconductorco/capsense
https://cypresssemiconductorco.github.io/capsense/capsense_api_reference_manual/html/index.html

AN215656 – PSoC 6 MCU: Dual-CPU System Design | 
Describes the dual-CPU architecture in PSoC 6 MCU, and shows how to build a simple dual-CPU design 
https://www.cypress.com/documentation/application-notes/an215656-psoc-6-mcu-dual-cpu-system-design
https://www.cypress.com/documentation/application-notes/an228571-getting-started-psoc-6-mcu-modustoolbox

re-targetIO is under Quick Panel ==> Documentation ==> Retarget IO
NOTE: If the application is built using newlib-nano, by default, floating point format strings (f) are not supported. 
To enable this support, you must add -u _printf_float to the linker command line.

Need to link in retarget-io library???
LibraryManager 1.1==> Libraries ==> Board Utils ==> retarget-io

Timing (for slider and 2 switches).
40000 loops in 30 seconds. 1333 scans/second, with 7 elements per scan. ==> 107 us/elements
Try without cap tune: same
CapSenseConfigurator==> Advanced ==> CSX ==> widget details Tx clock divider was 32 now 20., subconversions 100==>50.

create PWM application- ok

July 10, 2020
Add touch pad using CapSense Configurator
Looks like J5 is available for touch pad wires 4x4?
Try CSX 4x4 touch pad.
Had to change Tx freq divide to 17 (50 MHz/17 = 3MHz max TX clock)
Test with Capsense tuner?
Crashes with retargetIO
 The Tuner works with I2C and UART communication interfaces.  - so should try without retargetIO 
 (or print to console instead of terminal)
 create new copy of capsense example w/o IO to try using cap tune. (Then add touch pad later)
 CapTuner ==> tools ==> comm setup I2C, then connect, then started comm.
 
 try configurator again, adding 4x4 touch pad
 slider works but other two buttons stopped
 using CapSenseTuner, button1 is alwyas > 100 now. (Maybe changing Tx timing affected this?)
 Saw pattern for 4x4, but no values were read.
 
 Reading values, is there API? CapSense Middleware?
 https://cypresssemiconductorco.github.io/capsense/capsense_api_reference_manual/html/index.html
 
 The 'cy_capsense_context' variable that is used as the parameter of the
* Cy_CapSense_Init() and Cy_CapSense_Enable() functions is declared in the
* cycfg_capsense.h file.
main data structure: extern cy_stc_capsense_context_t cy_capsense_context;

 July 11, 2020
 
You can access the raw counts through the dsRam structure. The code for this would be:
raw = CapSense_dsRam.snsList.touchpad0[index].raw[FreqIndex];

elements_IDs[i] = CapSense_dsRam.snsList.touchpad0[1].raw[0];
For low level details See:
https://www.cypress.com/file/397251/download
p. 100:
1.Direct Access
The access to registers is performed through the Data Structure variable CapSense_dsRam and 
constants CapSense_dsFlash from application program.
Example of access to the Raw Count register of third sensor of Button0 widget: 
rawCount = CapSense_dsRam.snsList.button0[CapSense_BUTTON0_SNS2_ID].raw[0]

https://www.cypress.com/documentation/component-datasheets
PSoC_6_capacitive_Sensing3.0.pdf

Now retarget_IO hangs on 
 if (result != CY_RSLT_SUCCESS)     {         CY_ASSERT(0);     }
 returned 0x4020101 instead of zero...
 gave error in cyhal_uart_init()
 cyhal_uart.c: result = _cyhal_utils_reserve_and_connect(tx, tx_map);
 hwmgr_reserve ok
 Failed on reserving pin, type CYHAL_RSC_GPIO, block 5, channel 1
 cyhal_hwmgr_reserve(&pinRsc);
 pin resources not freed between runs???
 Pin 5.1 was reserved for cap sensor touch array, so blocking UART!
cyhal_resource_inst_t
/** The requested resource type is invalid */
CYHAL_HWMGR_RSLT_ERR_INUSE;
    
How to see what pins are being used
Device Configurator shows pins- with cap sense, no pins configured for UART...
Hello World 
(Device Configurator and all tools disappeared...)
(Click on upper right ``Modulus Toolbox'')
file with pins is *.modus

==> PSoC 6 Wi-Fi BT Prototyping Kit Guide shows used pins.
P50..3 is used for UART RX,TX, RTS, CTS, so that caused conflict
try 2x2 with p5.4 to P5.7
HAL= hardware abstraction layer
initialize cap sense came before retarget_io, so had conflict on p5.1
still gives conflict error.
p5.0 still in pin configuration? Try clean then build.

What pins does hello-world use?
Port 5 is unassigned
Tools disappeared again- use restart.

Used configurator to remove P5.0-P5.3 which conflicted with UART. (and stayed in file even after clean.)
(need to make sure I2C available).
I2C stopped working for some reason.


	

